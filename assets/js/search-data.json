{
  

  
  

  
      "page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://dtsivkovski.github.io/statibara/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "One Categorical Variable - Single Group",
          "content": "One Categorical Variable - Single Group . . | . . const frequencyCell = document.createElement(&quot;td&quot;); const frequencyInput = document.createElement(&quot;input&quot;); frequencyInput.type = &quot;number&quot;; frequencyInput.placeholder = &quot;Frequency&quot;; frequencyInput.classList.add(&quot;tableinputclear&quot;); frequencyCell.appendChild(frequencyInput); row.appendChild(categoryCell); row.appendChild(frequencyCell); table.appendChild(row); } // Add the table to the page const tableContainer = document.getElementById(&quot;tableContainer&quot;); tableContainer.innerHTML = &quot;&quot;; tableContainer.appendChild(table); // Generate the bar graph // generateBarGraph(); } function generateBarGraph() { // get the data from the table const table = document.querySelector(&quot;#valueTable&quot;); const rows = table.querySelectorAll(&quot;tr&quot;); const data = []; for (let i = 1; i &lt; rows.length; i++) { const cells = rows[i].querySelectorAll(&quot;td&quot;); const category = cells[0].querySelector(&quot;input&quot;).value; const frequency = parseInt(cells[1].querySelector(&quot;input&quot;).value); data.push({ category, frequency }); } console.log(data); // set up the canvas const canvas = document.getElementById(&quot;barGraph&quot;); const ctx = canvas.getContext(&quot;2d&quot;); ctx.canvas.width = window.innerWidth * 0.85; if (ctx.canvas.width &gt; 1000) ctx.canvas.width = 870; ctx.canvas.height = window.innerHeight * 0.5; ctx.clearRect(0, 0, canvas.width, canvas.height); // set up the axes var axisWidth = canvas.width - 80; var axisHeight = canvas.height - 80; var axisLeft = 50; var axisTop = 20; var axisRight = axisLeft + axisWidth; var axisBottom = axisTop + axisHeight; var maxFrequency = Math.max(...data.map((d) =&gt; d.frequency)); var frequencyStep = Math.ceil(maxFrequency / 10); var yLabels = []; for (let i = 0; i &lt;= maxFrequency; i += frequencyStep) { yLabels.push(i); console.log(yLabels); } //function for axes setup again function setaxes() { axisWidth = canvas.width - 80; axisHeight = canvas.height - 80; axisRight = axisLeft + axisWidth; axisBottom = axisTop + axisHeight; maxFrequency = Math.max(...data.map((d) =&gt; d.frequency)); frequencyStep = Math.ceil(maxFrequency / 10); yLabels = []; for (let i = 0; i &lt;= maxFrequency; i += frequencyStep) { yLabels.push(i); console.log(yLabels); } } // establish bar width var barWidth = 20; const barSpacing = 20; const barHeightScale = axisHeight / maxFrequency; // test bar width for category text length ctx.font = &quot;20px Arial&quot;; for (const { category, frequency } of data) { const barHeight = frequency * barHeightScale; ctx.font = &quot;20px Arial&quot;; var tempBarWidth = ctx.measureText(category).width + 10; if (tempBarWidth &gt; barWidth) barWidth = tempBarWidth; ctx.font = &quot;15px Arial&quot;; var tempBarWidth = ctx.measureText(frequency).width + 10; if (tempBarWidth &gt; barWidth) barWidth = tempBarWidth; } // test if frequency labels on y axis will fit on canvas, resize canvas if not ctx.font = &quot;15px Arial&quot;; for (const label of yLabels) { const labelWidth = ctx.measureText(label).width; if (axisLeft - labelWidth - 25 &lt; 0) { ctx.canvas.width = ctx.canvas.width + labelWidth + 10; ctx.canvas.height = window.innerHeight * 0.5; ctx.clearRect(0, 0, canvas.width, canvas.height); setaxes(); axisLeft = labelWidth + 25 + 5; } } // test if bars will fit on canvas, resize canvas if not if (barWidth * data.length + barSpacing * (data.length - 1) &gt; axisWidth) { ctx.canvas.width = barWidth * data.length + barSpacing * (data.length - 1) + 100; ctx.canvas.height = window.innerHeight * 0.5; ctx.clearRect(0, 0, canvas.width, canvas.height); setaxes(); } // draw x and y axes ctx.beginPath(); ctx.moveTo(axisLeft, axisBottom); ctx.lineTo(axisRight, axisBottom); ctx.moveTo(axisLeft, axisBottom); ctx.lineTo(axisLeft, axisTop); ctx.stroke(); // draw y axis labels ctx.textAlign = &quot;right&quot;; ctx.font = &quot;15px Arial&quot;; for (let i = 0; i &lt; yLabels.length; i++) { const y = axisBottom - (axisHeight * yLabels[i]) / maxFrequency; ctx.fillText(yLabels[i], axisLeft - 5, y + 3); ctx.beginPath(); ctx.moveTo(axisLeft - 5, y); ctx.lineTo(axisLeft, y); ctx.stroke(); } // draw x and y axis labels ctx.textAlign = &quot;center&quot;; ctx.font = &quot;20px Arial&quot;; ctx.fillText(&quot;Category&quot;, canvas.width / 2, canvas.height - 5); ctx.translate(20, canvas.height / 2); ctx.rotate(-Math.PI / 2); ctx.fillText(&quot;Frequency&quot;, 0, 0); ctx.rotate(Math.PI / 2); ctx.translate(-20, -canvas.height / 2); // draw the bars let x = axisLeft + barSpacing / 2; for (const { category, frequency } of data) { // draw bar const barHeight = frequency * barHeightScale; ctx.fillStyle = &quot;#004cff&quot;; ctx.fillRect(x, axisBottom - barHeight, barWidth, barHeight); // text for each bar ctx.font = &quot;20px Arial&quot;; ctx.fillStyle = &quot;#004cff&quot;; ctx.fillText(category, x + barWidth / 2, axisBottom + 20); // draw frequency text ctx.fillStyle = &quot;black&quot;; ctx.font = &quot;15px Arial&quot;; ctx.fillText(frequency, x + barWidth / 2, axisBottom - barHeight - 5); x += barWidth + barSpacing; } } &lt;/script&gt; .",
          "url": "https://dtsivkovski.github.io/statibara/onecat-single/",
          "relUrl": "/onecat-single/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
  

  
  

  
      ,"page12": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://dtsivkovski.github.io/statibara/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}